name: sampledjango

services:
  web:
    build:
      context: .
      target: dev-env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}
    command: manage.py runserver 0.0.0.0:8000
    ports: 
      - '8000:8000'
    develop:
      watch:
        - action: sync
          path: .
          target: /app
        - action: rebuild
          path: requirements.lock
    depends_on:
      - postgres
      - redis
      - minio
    restart: always

  postgres:
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5432:5432
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: always

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - 5050:80
    restart: always

  minio:
    image: minio/minio
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    ports:
      - 9000:9000
      - 9001:9001
    command: server --console-address ":9001" /data

  redis:
    image: redis
    restart: always
    volumes:
      - redis_data:/data
    ports:
      - 6379:6379

  ngrok:
    image: ngrok/ngrok
    restart: unless-stopped
    command: ['http', 'web:8000']
    ports:
      - 4040:4040
    depends_on:
      - web
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}

volumes:
  db_data:
  minio_data:
  redis_data: